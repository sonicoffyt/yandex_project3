import asyncio
import json
import logging
import os

import aiohttp
import sqlalchemy.orm

from aiogram.utils import executor
from sqlalchemy import desc

import config
import utils
from admin_handlers import *
from ai import *
from check_api_token import check_api_tokens

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)
logger.error("Starting bot")


@dp.message_handler(commands=['start'], state='*')
@dp.callback_query_handler(lambda c: c.data == 'return_to_main_menu', state='*')
async def cmd_start(message: typing.Union[types.Message, types.CallbackQuery], state: FSMContext):
    await state.finish()
    with db_session.create_session() as session:
        with session.begin():
            user = session.query(User).where(User.user_id == message.from_user.id).first()
            if message.from_user.id not in BANNED_USERS:
                if not user:
                    raw_user_id = message.text.split()[-1]
                    referer_first_level_id = 0
                    if raw_user_id.isdigit():
                        referer_first_level = session.query(User).where(User.user_id == int(raw_user_id)).first()
                        if referer_first_level:
                            referer_first_level_id = referer_first_level.user_id
                            await bot.send_message(chat_id=raw_user_id, text=f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª, –µ–≥–æ username - '
                                                                             f'@{message.from_user.username}')
                    session.add(User(user_id=message.from_user.id, referer_first_level_id=referer_first_level_id,
                                     reset_tokens=(datetime.datetime.now() + timedelta(days=7)).strftime(
                                         '%d-%m-%Y %H:%M:%S')))
                    session.commit()
                else:
                    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    kb.row(types.KeyboardButton('üõ°Ô∏è–ü–æ–º–æ—â—å'))
                    kb.row(types.KeyboardButton('üë§–ü—Ä–æ—Ñ–∏–ª—å'), types.KeyboardButton('üåÑ–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É'))
                    kb.row(types.KeyboardButton('üîé–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'))
                    if isinstance(message, types.CallbackQuery):
                        user.text = ''
                        user.last_answer = ''
                        user.last_question = ''
                        await message.message.delete()
                        await utils.send_img(message.from_user.id, PATH_START,
                                             'üëã –ü—Ä–∏–≤–µ—Ç!\n–¢—ã –ø–æ–ø–∞–ª –≤ ChatGptBot.',
                                             kb)
                    else:
                        await utils.send_img(message.from_user.id, PATH_START,
                                             'üëã –ü—Ä–∏–≤–µ—Ç!\n–¢—ã –ø–æ–ø–∞–ª –≤ ChatGptBot.',
                                             kb)




@dp.callback_query_handler(lambda c: c.data == 'help', state='*')
@dp.message_handler(lambda message: message.text == 'üõ°Ô∏è–ü–æ–º–æ—â—å', state='*')
@dp.message_handler(commands=['help'], state='*')
async def support(message: types.Message, state: FSMContext):
    if message.from_user.id not in BANNED_USERS:
        await state.finish()
        text = '''ü¶Ü–î—Ä—É–∑—å—è, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–æ—Ä—Ç!

ü§ñ–Ø - ChatGpt –±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å –≤–∞–º –≤–æ –≤—Å–µ–º. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: /profile, /img, /ask.'''
        kb = types.InlineKeyboardMarkup()
        kb.row(types.InlineKeyboardButton('–ö–∞—Ä—Ç–∏–Ω–∫–∏', callback_data='himg'))
        kb.row(types.InlineKeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='hsup'),
               types.InlineKeyboardButton('ChatGPT - —á—Ç–æ —ç—Ç–æ?', callback_data='hchatgpt'))
        if isinstance(message, types.CallbackQuery):
            await message.message.delete()
            await utils.send_img(message.from_user.id, PATH_HELP, text, kb)
        else:
            await utils.send_img(message.from_user.id, PATH_HELP, text, kb)


@dp.callback_query_handler(lambda c: c.data == 'hsup', state='*')
async def hsup(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    text = f"""
üë®‚Äçüíª–Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ - @slonic48. \n

"""
    if call.from_user.id not in BANNED_USERS:
        await call.message.delete()
        await utils.send_img(call.from_user.id, PATH_SUPPORT, text, return_to_help_menu_kb)




@dp.callback_query_handler(lambda c: c.data == 'hchatgpt', state='*')
async def hchatgpt(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    text = f"""
ü§ñ ChatGPT - —ç—Ç–æ –ò–ò, —Å–ø–æ—Å–æ–±–Ω—ã–π –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –û–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–µ—Ç—Å—è. ChatGPT –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö, –∫—Ç–æ –∂–µ–ª–∞–µ—Ç –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.

"""
    if call.from_user.id not in BANNED_USERS:
        await call.message.delete()
        await utils.send_img(call.from_user.id, PATH_GPT, text, return_to_help_menu_kb)


@dp.callback_query_handler(lambda c: c.data == 'himg', state='*')
async def himg(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    text = f"""
–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∑–∞–ø—Ä–æ—Å –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.
"""
    if call.from_user.id not in BANNED_USERS:
        await call.message.delete()
        await utils.send_img(call.from_user.id, PATH_HIMG, text, return_to_help_menu_kb)


@dp.callback_query_handler(lambda c: c.data == 'profile', state='*')
@dp.message_handler(lambda message: message.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å', state='*')
@dp.message_handler(commands=['profile'], state='*')
async def cabinet(message: types.Message, state: FSMContext):
    await state.finish()
    kb = types.InlineKeyboardMarkup()
    if message.from_user.id not in BANNED_USERS:
        with db_session.create_session() as session:
            with session.begin():
                user_id = message.from_user.id
                user = session.query(User).where(User.user_id == user_id).first()
                text = f'üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n' \
                       f'üë§ ID: {user.user_id}\n'
            kb.row(types.InlineKeyboardButton('üë®‚Äçüë©‚Äçüëß‚Äçüë¶–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', callback_data='ref'))
            if isinstance(message, types.CallbackQuery):
                await message.message.delete()
                await utils.send_img(message.from_user.id, PATH_PROFILE, text, kb)
            else:
                await utils.send_img(message.from_user.id, PATH_PROFILE, text, kb)

@dp.callback_query_handler(lambda c: c.data == 'ref', state='*')
async def referrals(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    with db_session.create_session() as session:
        session: sqlalchemy.orm.Session
        with session.begin():
            amount_primary_referals = session.query(User).where(
                User.referer_first_level_id == call.from_user.id).count()
            text = f"""
üìä –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:

üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {amount_primary_referals}

‚ö°Ô∏è –ß—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–∞–π—Ç–µ –µ–º—É —Å—Å—ã–ª–∫—É - https://t.me/{BOT_USERNAME}?start={call.from_user.id}
"""
            if call.from_user.id not in BANNED_USERS:
                await call.message.delete()
                await utils.send_img(call.from_user.id, PATH_REF, text, return_to_profile_menu_kb)

@dp.message_handler(lambda message: message.text == 'üåÑ–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É', state='*')
@dp.message_handler(commands=['img'], state='*')
async def ask(message: types.Message, state: FSMContext):
    if message.from_user.id not in BANNED_USERS:
        await state.finish()
        text = 'üá∫üá∏ –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ'
        kb = types.InlineKeyboardMarkup()
        kb.row(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data="return_to_main_menu"))
        await message.answer(text, reply_markup=kb)
        await UserPanel.generate_img.set()


@dp.message_handler(state=UserPanel.generate_img, content_types=types.ContentTypes.ANY)
async def answer_question(message: types.Message, state: FSMContext):
    with db_session.create_session() as session:
        with session.begin():
            if message.from_user.id not in BANNED_USERS:
                user = session.query(User).where(User.user_id == message.from_user.id).first()
                if user.user_tariff_id == 3 or int(user.tokens_balance) >= 1000:
                    if int(user.time_to_new_request) >= 0:
                        await message.answer('üñºÔ∏è –†–∏—Å—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É')
                        await state.finish()
                        try:
                            user.time_to_new_request -= 10
                            path = await create_image(message.text)
                            await bot.send_photo(message.from_user.id, types.InputFile(path))
                            if user.user_tariff_id != 3:
                                user.tokens_balance -= 0
                            os.remove(path)
                            await state.finish()
                        except Exception as ex:
                            ...
                            await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
                            await state.finish()
                    else:
                        await message.answer(f'–í—ã –Ω–µ–¥–∞–≤–Ω–æ –¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å. –í–∞—à–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ —Ç–∞—Ä–∏—Ñ—É -'
                                             f' 10. '
                                             f'–û—Å—Ç–∞–ª–æ—Å—å: {abs(user.time_to_new_request)} —Å–µ–∫—É–Ω–¥')
                        await state.finish()
                else:
                    await message.answer('–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤.')
                    await state.finish()


@dp.message_handler(lambda message: message.text == 'üîé–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', state='*')
@dp.message_handler(commands=['ask'], state='*')
@dp.callback_query_handler(lambda c: c.data == 'continue_dialog', state='*')
async def ask(message: types.Message, state: FSMContext):
    if message.from_user.id not in BANNED_USERS:
        await state.finish()
        with db_session.create_session() as session:
            with session.begin():
                if isinstance(message, types.CallbackQuery):
                    user = session.query(User).where(User.user_id == message.from_user.id).first()
                    kb = types.InlineKeyboardMarkup()
                    kb.row(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data="return_to_main_menu"))
                    text = f'–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥(1 —Ç–æ–∫–µ–Ω = 1 —Å–∏–º–≤–æ–ª)\n' \
                           f'–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.last_question[:20] + "..." if len(user.last_question) > 20 else user.last_question}\n' \
                           f'–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –ò–ò: {user.last_answer[:20] + "..." if len(user.last_answer) > 20 else user.last_answer}'
                    await message.message.edit_text(text, reply_markup=kb)
                    await UserPanel.ask_question.set()
                else:
                    kb = types.InlineKeyboardMarkup()
                    kb.row(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data="return_to_main_menu"))
                    text = 'üîé –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å'
                    await message.answer(text, reply_markup=kb)
                    await UserPanel.ask_question.set()


@dp.message_handler(state=UserPanel.ask_question)
async def answer_question(message: types.Message, state: FSMContext):
    with db_session.create_session() as session:
        with session.begin():
            if message.from_user.id not in BANNED_USERS:
                user = session.query(User).where(User.user_id == message.from_user.id).first()
                text = f'–ú–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}. –¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ: '
                len_text = len(text)
                if user.user_tariff_id == 3 or int(user.tokens_balance) >= len(message.text):
                    if user.time_to_new_request >= 0:
                        await message.answer('‚è≥ –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –æ—Ç–≤–µ—Ç')
                        user.time_to_new_request -= 10
                        await state.finish()
                        try:
                            user.text += text
                            answer = await create_text(user.text)
                            kb = types.InlineKeyboardMarkup()
                            kb.row(types.InlineKeyboardButton('–î–∞', callback_data='continue_dialog'),
                                   types.InlineKeyboardButton('–ù–µ—Ç', callback_data='return_to_main_menu'))
                            await message.answer(answer)
                            await message.answer('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥?', reply_markup=kb)
                            user.last_answer = answer
                            user.last_question = message.text
                            user.text += answer
                            if user.user_tariff_id != 3:
                                user.tokens_balance -= 0
                                user.tokens_balance -= 0
                            await state.finish()
                        except Exception as ex:
                            ...
                            user.text = user.text[:-len_text]
                            kb = types.InlineKeyboardMarkup()
                            kb.row(types.InlineKeyboardButton('–î–∞', callback_data='continue_dialog'),
                                   types.InlineKeyboardButton('–ù–µ—Ç', callback_data='return_to_main_menu'))
                            await message.answer(
                                '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞?(–í–æ–ø—Ä–æ—Å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ)',
                                reply_markup=kb)
                            await state.finish()
                        await state.finish()
                    else:
                        user.text = user.text[:-len_text]
                        kb = types.InlineKeyboardMarkup()
                        kb.row(types.InlineKeyboardButton('–î–∞', callback_data='continue_dialog'),
                               types.InlineKeyboardButton('–ù–µ—Ç', callback_data='return_to_main_menu'))
                        await message.answer(f'–í—ã –Ω–µ–¥–∞–≤–Ω–æ –¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å.\n '
                                             f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {abs(user.time_to_new_request)} —Å–µ–∫—É–Ω–¥\n'
                                             f'–î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ò–ò(–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–Ω–æ–≤–æ –ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å)\n'
                                             f'–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞?',
                                             reply_markup=kb)
                        await state.finish()
                else:
                    await message.answer('–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤.')
                    await state.finish()


async def time_to_new_message():
    while True:
        await asyncio.sleep(1)
        with db_session.create_session() as session:
            session: sqlalchemy.orm.Session
            with session.begin():
                users = session.query(User).where(User.time_to_new_request < 0).all()
                for user in users:
                    if user.is_banned is False:
                        try:
                            user.time_to_new_request += 1

                        except Exception as ex:
                            ...


async def banned_users():
    while True:
        await asyncio.sleep(60)
        with db_session.create_session() as session:
            with session.begin():
                users = session.query(User).all()
                try:
                    for user in users:
                        if user.is_banned is True:
                            config.BANNED_USERS.append(user.user_id)
                        else:
                            if user.user_id in config.BANNED_USERS:
                                config.BANNED_USERS.remove(user.user_id)
                except Exception as ex:
                    ...


if __name__ == "__main__":
    db_session.global_init("db/database.db")
    loop = asyncio.get_event_loop()
    loop.create_task(time_to_new_message())
    loop.create_task(banned_users())
    loop.create_task(check_api_tokens())
    executor.start_polling(dp, skip_updates=True)
